generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  passwordHash            String?                  @map("password_hash")
  name                    String?
  role                    String                   @default("USER")
  subscriptionTier        String                   @default("free") @map("subscription_tier")
  subscriptionExpiresAt   DateTime?                @map("subscription_expires_at")
  stripeCustomerId        String?                  @unique @map("stripe_customer_id")
  stripeSubscriptionId    String?                  @unique @map("stripe_subscription_id")
  emailSubscribed         Boolean                  @default(false) @map("email_subscribed")
  emailVerified           DateTime?                @map("email_verified")
  isActive                Boolean                  @default(true) @map("is_active")
  lastLoginAt             DateTime?                @map("last_login_at")
  createdAt               DateTime                 @default(now()) @map("created_at")
  updatedAt               DateTime                 @updatedAt @map("updated_at")
  accounts                Account[]
  aiResearchSessions      AIResearchSession[]
  amazonReports           AmazonReport[]
  analyticsEvents         AnalyticsEvent[]
  dailyFeatures           DailyFeature[]
  invoices                Invoice[]
  newsletterCampaigns     NewsletterCampaign[]
  newsletterSubscriptions NewsletterSubscription[]
  analyses                ProductAnalysis[]
  savedProducts           SavedProduct[]
  sessions                Session[]
  subscriptionUsage       SubscriptionUsage[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("email_verification_tokens")
}

model Product {
  id                 String              @id @default(cuid())
  asin               String              @unique
  title              String
  category           String?
  subcategory        String?
  brand              String?
  price              Float?
  bsr                Int?
  rating             Float?
  reviewCount        Int?                @map("review_count")
  imageUrls          String?             @map("image_urls")
  status             String              @default("ACTIVE")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  aiResearchSessions AIResearchSession[]
  competitorAnalysis CompetitorAnalysis?
  dailyFeatures      DailyFeature[]
  demandAnalysis     DemandAnalysis?
  financialModel     FinancialModel?
  inventoryAnalysis  InventoryAnalysis?
  keywordAnalysis    KeywordAnalysis[]
  ppcStrategy        PPCStrategy?
  analysis           ProductAnalysis?
  keywords           ProductKeyword[]
  savedByUsers       SavedProduct[]

  @@map("products")
}

model ProductAnalysis {
  id                  String   @id @default(cuid())
  productId           String   @unique @map("product_id")
  opportunityScore    Int      @map("opportunity_score")
  competitionScore    Int      @map("competition_score")
  demandScore         Int      @map("demand_score")
  feasibilityScore    Int      @map("feasibility_score")
  timingScore         Int      @map("timing_score")
  financialAnalysis   Json     @map("financial_analysis")
  marketAnalysis      Json     @map("market_analysis")
  competitionAnalysis Json     @map("competition_analysis")
  keywordAnalysis     Json     @map("keyword_analysis")
  reviewAnalysis      Json     @map("review_analysis")
  supplyChainAnalysis Json     @map("supply_chain_analysis")
  aiGeneratedContent  String?  @map("ai_generated_content")
  humanEditedContent  String?  @map("human_edited_content")
  focusGraphData      Json?    @map("focus_graph_data")
  analystId           String?  @map("analyst_id")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  analyst             User?    @relation(fields: [analystId], references: [id])
  product             Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_analyses")
}

model Keyword {
  id               String           @id @default(cuid())
  keyword          String           @unique
  searchVolume     Int?             @map("search_volume")
  competitionScore Float?           @map("competition_score")
  cpc              Float?
  trendData        Json?            @map("trend_data")
  createdAt        DateTime         @default(now()) @map("created_at")
  products         ProductKeyword[]

  @@map("keywords")
}

model ProductKeyword {
  productId      String  @map("product_id")
  keywordId      String  @map("keyword_id")
  relevanceScore Float   @map("relevance_score")
  position       Int?
  keyword        Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  product        Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, keywordId])
  @@map("product_keywords")
}

model DailyFeature {
  id           String   @id @default(cuid())
  productId    String   @map("product_id")
  featuredDate DateTime @unique @map("featured_date")
  headline     String?
  summary      String?
  createdBy    String   @map("created_by")
  createdAt    DateTime @default(now()) @map("created_at")
  creator      User     @relation(fields: [createdBy], references: [id])
  product      Product  @relation(fields: [productId], references: [id])

  @@map("daily_features")
}

model SavedProduct {
  userId    String   @map("user_id")
  productId String   @map("product_id")
  savedAt   DateTime @default(now()) @map("saved_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, productId])
  @@map("saved_products")
}

model KeywordAnalysis {
  id                 String   @id @default(cuid())
  productId          String   @map("product_id")
  primaryKeywords    Json     @map("primary_keywords")
  longTailKeywords   Json     @map("long_tail_keywords")
  keywordDifficulty  Json     @map("keyword_difficulty")
  seasonalTrends     Json     @map("seasonal_trends")
  ppcMetrics         Json     @map("ppc_metrics")
  searchIntent       Json     @map("search_intent")
  competitorKeywords Json     @map("competitor_keywords")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("keyword_analyses")
}

model PPCStrategy {
  id                   String   @id @default(cuid())
  productId            String   @unique @map("product_id")
  estimatedLaunchCost  Float    @map("estimated_launch_cost")
  suggestedBidRanges   Json     @map("suggested_bid_ranges")
  competitorAdAnalysis Json     @map("competitor_ad_analysis")
  campaignStructure    Json     @map("campaign_structure")
  expectedACoS         Float    @map("expected_acos")
  breakEvenACoS        Float    @map("break_even_acos")
  launchPhases         Json     @map("launch_phases")
  budgetAllocation     Json     @map("budget_allocation")
  targetingStrategy    Json     @map("targeting_strategy")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  product              Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("ppc_strategies")
}

model InventoryAnalysis {
  id                   String   @id @default(cuid())
  productId            String   @unique @map("product_id")
  optimalOrderQuantity Int      @map("optimal_order_quantity")
  seasonalDemand       Json     @map("seasonal_demand")
  supplierAnalysis     Json     @map("supplier_analysis")
  cashFlowProjections  Json     @map("cash_flow_projections")
  riskAssessment       Json     @map("risk_assessment")
  leadTimes            Json     @map("lead_times")
  qualityRequirements  Json     @map("quality_requirements")
  costBreakdown        Json     @map("cost_breakdown")
  moqAnalysis          Json     @map("moq_analysis")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  product              Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory_analyses")
}

model DemandAnalysis {
  id                 String   @id @default(cuid())
  productId          String   @unique @map("product_id")
  marketSize         Json     @map("market_size")
  growthTrends       Json     @map("growth_trends")
  geographicDemand   Json     @map("geographic_demand")
  customerBehavior   Json     @map("customer_behavior")
  seasonalPatterns   Json     @map("seasonal_patterns")
  demandDrivers      Json     @map("demand_drivers")
  marketSegmentation Json     @map("market_segmentation")
  priceElasticity    Json     @map("price_elasticity")
  forecasting        Json     @map("forecasting")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("demand_analyses")
}

model CompetitorAnalysis {
  id                    String   @id @default(cuid())
  productId             String   @unique @map("product_id")
  topCompetitors        Json     @map("top_competitors")
  priceAnalysis         Json     @map("price_analysis")
  marketShareData       Json     @map("market_share_data")
  competitiveAdvantages Json     @map("competitive_advantages")
  threatLevel           String   @map("threat_level")
  entryBarriers         Json     @map("entry_barriers")
  competitorStrategies  Json     @map("competitor_strategies")
  swotAnalysis          Json     @map("swot_analysis")
  benchmarking          Json     @map("benchmarking")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  product               Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("competitor_analyses")
}

model FinancialModel {
  id                     String   @id @default(cuid())
  productId              String   @unique @map("product_id")
  roiCalculations        Json     @map("roi_calculations")
  breakEvenAnalysis      Json     @map("break_even_analysis")
  cashFlowProjections    Json     @map("cash_flow_projections")
  riskMetrics            Json     @map("risk_metrics")
  scenarioAnalysis       Json     @map("scenario_analysis")
  profitabilityModel     Json     @map("profitability_model")
  investmentRequirements Json     @map("investment_requirements")
  fbaFeeAnalysis         Json     @map("fba_fee_analysis")
  taxImplications        Json     @map("tax_implications")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")
  product                Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("financial_models")
}

model AIResearchSession {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  productId       String?  @map("product_id")
  sessionType     String   @map("session_type")
  conversation    Json     @map("conversation")
  insights        Json     @map("insights")
  recommendations Json     @map("recommendations")
  followUpActions Json     @map("follow_up_actions")
  sessionStatus   String   @default("active") @map("session_status")
  tokensUsed      Int      @default(0) @map("tokens_used")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  product         Product? @relation(fields: [productId], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_research_sessions")
}

model TrendAnalysis {
  id              String   @id @default(cuid())
  trendName       String   @map("trend_name")
  category        String
  volume          String
  growthRate      Float    @map("growth_rate")
  description     String
  opportunities   Json     @map("opportunities")
  relatedProducts Json     @map("related_products")
  marketData      Json     @map("market_data")
  riskFactors     Json     @map("risk_factors")
  timeframe       String   @map("timeframe")
  confidence      Float    @map("confidence")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("trend_analyses")
}

model NewsletterSubscription {
  id               String    @id @default(cuid())
  email            String    @unique
  userId           String?   @map("user_id")
  subscriptionType String    @default("daily_deals") @map("subscription_type")
  isActive         Boolean   @default(true) @map("is_active")
  preferences      Json?     @map("preferences")
  subscribeSource  String?   @map("subscribe_source")
  unsubscribeToken String    @unique @map("unsubscribe_token")
  subscribeDate    DateTime  @default(now()) @map("subscribe_date")
  lastEmailSent    DateTime? @map("last_email_sent")
  emailsSent       Int       @default(0) @map("emails_sent")
  clicksCount      Int       @default(0) @map("clicks_count")
  opensCount       Int       @default(0) @map("opens_count")
  user             User?     @relation(fields: [userId], references: [id])

  @@map("newsletter_subscriptions")
}

model NewsletterCampaign {
  id                String    @id @default(cuid())
  name              String
  subject           String
  content           String
  htmlContent       String?   @map("html_content")
  campaignType      String    @map("campaign_type")
  featuredProductId String?   @map("featured_product_id")
  scheduledDate     DateTime  @map("scheduled_date")
  sentDate          DateTime? @map("sent_date")
  status            String    @default("draft")
  recipientCount    Int       @default(0) @map("recipient_count")
  sentCount         Int       @default(0) @map("sent_count")
  openRate          Float?    @map("open_rate")
  clickRate         Float?    @map("click_rate")
  createdBy         String    @map("created_by")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  creator           User      @relation(fields: [createdBy], references: [id])

  @@map("newsletter_campaigns")
}

model AnalyticsEvent {
  id         String   @id @default(cuid())
  event      String
  properties String?
  userId     String?  @map("user_id")
  timestamp  DateTime
  userAgent  String?  @map("user_agent")
  url        String?
  referrer   String?
  ipAddress  String?  @map("ip_address")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User?    @relation(fields: [userId], references: [id])

  @@map("analytics_events")
}

model SubscriptionUsage {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  usageType   String   @map("usage_type")
  usageCount  Int      @default(0) @map("usage_count")
  usageLimit  Int?     @map("usage_limit")
  periodStart DateTime @map("period_start")
  periodEnd   DateTime @map("period_end")
  resetDate   DateTime @map("reset_date")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, usageType, periodStart])
  @@map("subscription_usage")
}

model Invoice {
  id                   String    @id @default(cuid())
  userId               String    @map("user_id")
  stripeInvoiceId      String    @unique @map("stripe_invoice_id")
  stripeSubscriptionId String?   @map("stripe_subscription_id")
  amount               Float
  currency             String    @default("usd")
  status               String
  description          String?
  invoiceUrl           String?   @map("invoice_url")
  hostedInvoiceUrl     String?   @map("hosted_invoice_url")
  invoicePdf           String?   @map("invoice_pdf")
  periodStart          DateTime  @map("period_start")
  periodEnd            DateTime  @map("period_end")
  dueDate              DateTime  @map("due_date")
  paidAt               DateTime? @map("paid_at")
  attemptCount         Int       @default(0) @map("attempt_count")
  nextPaymentAttempt   DateTime? @map("next_payment_attempt")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model AmazonReport {
  id               String            @id @default(cuid())
  type             String
  amazonReportId   String            @unique @map("amazon_report_id")
  status           String            @default("PENDING")
  startDate        DateTime          @map("start_date")
  endDate          DateTime          @map("end_date")
  marketplaceId    String            @map("marketplace_id")
  userId           String            @map("user_id")
  reportDocumentId String?           @map("report_document_id")
  error            String?
  retryCount       Int               @default(0) @map("retry_count")
  lastPolledAt     DateTime?         @map("last_polled_at")
  completedAt      DateTime?         @map("completed_at")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  reportData       AmazonReportData?
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  searchTerms      SearchTerm[]

  @@index([status, lastPolledAt])
  @@index([userId, type, createdAt])
  @@map("amazon_reports")
}

model AmazonReportData {
  id          String       @id @default(cuid())
  reportId    String       @unique @map("report_id")
  data        Json
  recordCount Int          @map("record_count")
  createdAt   DateTime     @default(now()) @map("created_at")
  report      AmazonReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("amazon_report_data")
}

model SearchTerm {
  id                  String       @id @default(cuid())
  reportId            String       @map("report_id")
  term                String
  searchVolume        Int          @map("search_volume")
  clickShare          Float        @map("click_share")
  conversionShare     Float        @map("conversion_share")
  relevanceScore      Float        @map("relevance_score")
  clickedAsin         String?      @map("clicked_asin")
  clickedProductTitle String?      @map("clicked_product_title")
  weekStartDate       DateTime     @map("week_start_date")
  weekEndDate         DateTime     @map("week_end_date")
  marketplaceId       String       @map("marketplace_id")
  createdAt           DateTime     @default(now()) @map("created_at")
  report              AmazonReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([term, weekStartDate])
  @@index([reportId])
  @@index([clickedAsin])
  @@map("search_terms")
}
